_ALL_:
 - ambertools14
 - opsin
 - symmol
 - python_install
 - moldesign
 - moldesign_notebook


##################################################
# Bases for running command line and python tools
base:  # cache-buster - build this with --no-cache to force a complete rebuild.
 FROM: phusion/baseimage
 build: |
  RUN apt-get -y update

base_install:
 requires:
  - base
 build: |
  RUN apt-get -y install \
      build-essential \
      libcr-dev \
      mpich2 \
      mpich2-doc \
      cmake \
      git \
      subversion \
      mercurial \
      libfftw3-dev \
      libbz2-dev \
      libopenmpi-dev \
      libtool \
      swig \
      wget \
      liblapack-dev \
      libblas-dev \
      gfortran \
      csh \
      tcsh \
      cmake-curses-gui \
      libhdf5-dev \
      libatlas-dev \
      liblapack-dev \
      patch \
      autoconf \
      automake \
      libnetcdf-dev \
      doxygen
  ENV TERM=dumb


python_install:
 requires:
  - base_install
 build: |
  RUN apt-get install -y \
    python \
    python-dev \
    python-pip \
    python-numpy \
    python-scipy \
    python-pandas \
    python-scikits-learn \
    python-h5py \
    python-mpi4py \
    python-sympy \
    python-yaml \
    python-zmq \
    python-tornado \
    Cython \
    gfortran \
    zlib1g-dev \
    libzmq-dev \
    pkg-config \
    libfreetype6-dev \
    netpbm \
    libpng12-dev
  ENV PYTHONPATH=/opt


cuda7_0:
 requires:
  - base_install
 build: |
  RUN wget -nv http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_7.0-28_amd64.deb
  RUN dpkg -i cuda-repo-ubuntu1404_7.0-28_amd64.deb && apt-get update && apt-get -y install cuda


############################################
# moldesign
mdt_python_base:
 requires:
  - python_install
 build: |
   RUN pip install --upgrade \
    Pint \
    markdown2 \
    docker-py \
    requests \
    cclib \
    fortranformat \
    nose \
    webcolors \
    funcsigs

moldesign_base:
 requires:
  - mdt_python_base
 build: |
  RUN mkdir -p /opt/pylib &&  git clone -b '0.2' --single-branch --depth 1 https://5f2c9ecad39c0dae106d50cc89dff276008e3fe3@git.autodesk.com/virshua/Buckyball /opt/pylib/Moldesign
  RUN ln -s /opt/pylib/Moldesign/moldesign /opt/moldesign

pyccc:
 requires:
  - mdt_python_base
 build: |
  RUN mkdir -p /opt/pylib &&  git clone -b '0.2' --single-branch --depth 1 https://5f2c9ecad39c0dae106d50cc89dff276008e3fe3@git.autodesk.com/virshua/PyBioWorkflow /opt/pylib/PyBioWorkflow
  RUN ln -s /opt/pylib/PyBioWorkflow/bioplatform /opt/bioplatform

nbmolviz:
 requires:
  - mdt_python_base
  - notebook
 build: |
  RUN mkdir -p /opt/pylib && git clone -b '0.2' --single-branch --depth 1 https://5f2c9ecad39c0dae106d50cc89dff276008e3fe3@git.autodesk.com/virshua/Py3DMol /opt/pylib/Py3DMol
  RUN ln -s /opt/pylib/Py3DMol/nbmolviz /opt/nbmolviz
  RUN python -c "from nbmolviz import install; install.widgets()"

moldesign_notebook:
 description: A production-ready, fully outfitted jupyter server container
 requires:
  - chem_python
  - nbmolviz
  - pyccc
  - moldesign_base
 build: |
  RUN cp -r /opt/moldesign/notebooks /notebooks/moldesign_examples

moldesign:
 description: Complete moldesign package with all external python bindings
 requires:
  - moldesign_notebook
 build: |
  ENTRYPOINT []
  CMD ''

#########################################
# Command line chemistry
gamess:
 requires:
  - base_install
 build_directory: gamess
 build: |
  ADD gamess-current.tar.gz /opt
  ADD config.tar /opt
  RUN cd /opt/gamess/ddi && ./compddi | tee compddi.log \
   && mv ddikick.x .. && cd /opt/gamess && ./compall | \
   tee compall.log && ./lked gamess 00 | tee lked.log \
   && mkdir -p /scr/root /root/scr && \
   ln -s /opt/gamess/rungms /usr/local/bin/rungms


opsin:
 FROM: java
 build: |
  RUN mkdir -p /opt/opsin && cd /opt/opsin && \
    wget https://bitbucket.org/dan2097/opsin/downloads/opsin-2.0.0-jar-with-dependencies.jar
  RUN cmd='java -jar /opt/opsin/opsin-2.0.0-jar-with-dependencies.jar' && \
    printf "#!/bin/bash\n$cmd \$@\n" > /usr/local/bin/opsin && \
    chmod +x /usr/local/bin/opsin


ambertools14:
 requires:
  - python_install
 build_directory: ambertools
 build: |
    ENV AMBERHOME /opt/amber14/
    ENV PATH /opt/amber14/bin:$PATH
    ADD AmberTools14.tar.bz2 /opt
    RUN apt-get install -y \
      flex \
      bison
    RUN cd /opt/amber14 && echo n | ./configure -noX11 --with-python /usr/bin/python gnu
    RUN cd /opt/amber14 && make -j4 install
    RUN cd /opt/amber14 && \
      echo "test -f /opt/amber14/amber.sh \
      && source /opt/amber14/amber.sh" >> /root/.bash_profile

nwchem:
 requires:
  - base_install
 build_directory: nwchem/
 build: |
  RUN cd /opt \
   && wget --trust-server-names -nv http://www.nwchem-sw.org/download.php?f=Nwchem-6.6.revision27746-srconly.2015-10-20.tar.bz2 \
   && tar xjf Nwchem-6.6.revision27746-srconly.2015-10-20.tar.bz2 \
   && rm Nwchem-6.6.revision27746-srconly.2015-10-20.tar.bz2
  ENV MPI_LOC=/usr \
      MPI_INCLUDE=/usr/include/mpich \
      MPI_LIB=/usr/lib \
      NWCHEM_TOP=/opt/nwchem-6.6 \
      NWCHEM_TARGET=LINUX64 \
      NWCHEM_MODULES=all \
      USE_MPI=y USE_MPIF=y \
      HAS_BLAS=yes \
      LIBMPI='-lfmpich -lmpich' \
      NWCHEM_TARGET=LINUX64 \
      BLASOPT="-lblas -lpthread -lrt" \
      BLAS_SIZE=4 \
      USE_64TO32=y
  RUN cd $NWCHEM_TOP/src && make nwchem_config && make -j4 | tee make.log


nbo: # This ISN'T open source - we'll provide the dockerfile, but users must supply the source code
 requires:
  - base_install
 build_directory: nbo6_0
 build: |
  ADD nbo6.0-src.tar.gz /opt/
  RUN cd /opt/nbo6 && sed -i.orig -e 's/NBODIR = \~\/nbo6/NBODIR = \/opt\/nbo6/g' Make.config
  RUN cd /opt/nbo6 && make
  RUN ln -s /opt/nbo6/bin/*.exe /usr/local/bin/
  ENV NBOEXE=/opt/nbo6/bin/nbo6.i4.exe


symmol:
 requires:
  - base_install
 build_directory: symmol
 build: |
  RUN mkdir -p /src/symmol
  ADD symmol.f /src/symmol/symmol.f
  RUN cd /src/symmol && gfortran symmol.f -o symmol && mv symmol /usr/local/bin



########################
# Python-exposed tools
openmm: # NEWFEATURE: add GPU support (opencl/cuda)
 description: Basic OpenMM install (CPU only) with python bindings
 build_directory: openmm
 requires:
  - python_install
 build: |
  RUN apt-get -y install unzip \
    && mkdir -p /src
  ADD OpenMM-7.0.0-Linux.zip /src/OpenMM.zip
  RUN cd /src \
    && unzip OpenMM.zip \
    && cd /src/OpenMM-7.*-Linux \
    && cat < echo "\n\n" | ./install.sh



pdbfixer:
 requires:
  - openmm
 build: |
  RUN pip install https://github.com/pandegroup/pdbfixer/archive/v1.2.tar.gz


pyscf:
 requires:
  - python_install
 build: |
  RUN cd /opt && git clone https://github.com/sunqm/pyscf.git
  RUN cd /opt/pyscf/lib && \
     mv CMakeLists.txt CMakeLists.txt.old && \
     sed -e "s/libcint\.git/qcint.git/" CMakeLists.txt.old > CMakeLists.txt
  RUN cd /opt/pyscf/lib && mkdir build && cd build && cmake .. && make


openbabel:
 requires:
  - python_install
 build: |
  RUN apt-get install -y \
    openbabel \
    python-openbabel


notebook:
 requires:
  - python_install
 build_directory: notebook/
 build: |
    RUN apt-get install python-matplotlib
    RUN pip install \
        ipython==4.1.2 \
        jupyter \
        ipywidgets==4.1.1
    ENTRYPOINT /run_notebook.sh
    EXPOSE 8888
    RUN mkdir /notebooks
    WORKDIR /notebooks
    COPY run_notebook.sh /run_notebook.sh

pyquante2:
 requires:
  - python_install
 build: |
  RUN pip install git+git://github.com/rpmuller/pyquante2.git


chem_python:
 description: All of the external python chemistry libraries in one place
 requires:
  - openbabel
  - openmm
  - pyscf
  - pdbfixer

chem_notebook:
 requires:
  - notebook
  - chem_python
