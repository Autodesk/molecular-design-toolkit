_ALL_:
 - ambertools
 - opsin
 - symmol
 - openmm
 - openbabel
 - pyscf
 - python_install
 - moldesign_complete
 - moldesign_notebook
 - moldesign_minimal


##################################################
# Bases for running command line and python tools
base:  # cache-buster - build this with --no-cache to force a complete rebuild.
 FROM: debian:jessie

buildbase:
 description: |
    Well-outfitted image for building binaries. Rather than deploying this huge image,
    binaries should be built here then copied into smaller deployment images
 requires:
  - base
 build: |
  RUN apt-get update && apt-get upgrade
  RUN apt-get install -y \
        autoconf        \
        automake        \
        build-essential \
        cmake           \
        cmake-curses-gui\
        csh             \
        doxygen         \
        gfortran        \
        git             \
        libatlas-dev    \
        libblas-dev     \
        libbz2-dev      \
        libcr-dev       \
        libfftw3-dev    \
        libhdf5-dev     \
        liblapack-dev   \
        libnetcdf-dev   \
        libopenmpi-dev  \
        libpng12-dev    \
        libpython-dev   \
        libtool         \
        mercurial       \
        mpich2          \
        mpich2-doc      \
        patch           \
        pkg-config      \
        python          \
        python-numpy    \
        python-pip      \
        python-scipy    \
        python-tornado  \
        python-yaml     \
        python-zmq      \
        subversion      \
        swig            \
        tcsh            \
        vim             \
        wget            \
        zip
  ENV TERM=dumb
  RUN echo '#!/bin/bash' > /usr/local/bin/cleanapt \
    && chmod +x /usr/local/bin/cleanapt


deploybase:
  description: lightweight image for deployment
  requires:
    - base
  build_directory: ./deploybase
  build: |
    ADD cleanapt /usr/local/bin
    RUN chmod +x /usr/local/bin/cleanapt
    RUN apt-get update \
      && apt-get install -y --no-install-recommends \
        ca-certificates \
        git \
        vim \
        wget \
      && cleanapt

python_deploy_base:
 requires:
  - deploybase
 build: |
  RUN apt-get update \
      && apt-get install -y --no-install-recommends \
        python \
        python-numpy \
        python-scipy \
        python-yaml \
      && cleanapt
  RUN cd /tmp \
    && wget https://bootstrap.pypa.io/get-pip.py \
    && python get-pip.py
  ENV PYTHONPATH=/opt



############################################
# moldesign
# Note - this is built by CLONING the current repo, then building an sdist, then installing that.
# It's convoluted, but it replicate what actually gets installed via PyPI
moldesign:
 description: Base installation of the MDT library. Built by cloning the current git repo.
 requires:
  - python_deploy_base
 build_directory: ../
 build: |
  COPY . /opt/molecular-design-toolkit
  RUN cd /opt \
   && mv molecular-design-toolkit molecular-design-toolkit_dirty \
   && git clone molecular-design-toolkit_dirty molecular-design-toolkit \
   && cd molecular-design-toolkit && python setup.py sdist \
   && pip install dist/*
 copy_from:
   biopython:
     /usr/lib/python2.7/dist-packages/biopython: /usr/lib/python2.7/dist-packages
   parmed:
     /usr/lib/python2.7/dist-packages/parmed: /usr/lib/python2.7/dist-packages


pyccc:
 requires:
  - python_install
 build: |
  RUN pip install pyccc==0.6.4


nbmolviz:
 requires:
  - python_install
 build: |
  RUN pip install nbmolviz
  RUN jupyter nbextension enable --python --sys-prefix nbmolviz==0.6.5 &&
      jupyter nbextension enable --python --sys-prefix widgetsnbextensions


moldesign_notebook:
 description: A production-ready, fully outfitted jupyter server container
 requires:
  - chem_python
  - notebook
  - moldesign
 build: |
  RUN cp -r /usr/local/lib/python2.7/dist-packages/moldesign/_notebooks /notebooks/moldesign_examples
  RUN jupyter nbextension enable --python --sys-prefix widgetsnbextension \
   && jupyter nbextension enable --python --sys-prefix nbmolviz



moldesign_complete:
  description: An image with moldesign and all python dependencies
  requires:
   - moldesign_notebook
  build: |
   ENTRYPOINT []
   CMD ''

moldesign_standalone:
  description: |
       Complete image INCLUDING binary dependencies, which run in container
       subprocesses (i.e., NOT with CCC)
  requires:
     - moldesign_complete
     - nwchem
     - ambertools
     #- opsin - there's a base image conflict with this
  build: |
    RUN mkdir -p ~/.moldesign \
     && echo "engine_type: subprocess" > ~/.moldesign/moldesign.yml

moldesign_minimal:
   description: |
      Same as moldesign_notebook, but *without* any dependencies (OpenBabel, OpenMM etc.).
      Used for testing remote execution environment
   requires:
    - notebook
    - moldesign
   build: |
     RUN cp -r /usr/local/lib/python2.7/dist-packages/moldesign/_notebooks /notebooks/moldesign_examples
     RUN jupyter nbextension enable --python --sys-prefix widgetsnbextension \
      && jupyter nbextension enable --python --sys-prefix nbmolviz
     ENTRYPOINT []
     CMD ''

#########################################
# Command line chemistry
opsin:
 FROM: java
 build: |
  RUN mkdir -p /opt/opsin && cd /opt/opsin && \
    wget https://bitbucket.org/dan2097/opsin/downloads/opsin-2.0.0-jar-with-dependencies.jar
  RUN cmd='java -jar /opt/opsin/opsin-2.0.0-jar-with-dependencies.jar' && \
    printf "#!/bin/bash\n$cmd \$@\n" > /usr/local/bin/opsin && \
    chmod +x /usr/local/bin/opsin


ambertools_requirements:
 build: |
   ENV AMBERHOME /opt/amber16/
   ENV PATH /opt/amber16/bin:$PATH
   RUN  apt-get update \
     && apt-get install -y --no-install-recommends \
             libbz2-dev \
             libnetcdf-dev \
             libfftw3-dev \
             libnetcdf-dev \
     && cleanapt

ambertools_build:
 requires:
   - buildbase
   - ambertools_requirements
 build: |
    RUN apt-get update
    RUN apt-get install -y wget bzip2
    RUN cd /opt \
     && echo 'Expanding tar archive AmberTools16.tar.bz2 ...' \
     && wget -nv "http://ambermd.org/cgi-bin/AmberTools16-get.pl?Name=AaronVirshup&Institution=Autodesk&City=SanFrancisco&State=CA&Country=USA" -O \
           /opt/AmberTools16.tar.bz2 \
     && tar -xjf AmberTools16.tar.bz2 && rm AmberTools16.tar.bz2
    RUN apt-get install -y \
         flex \
         bison \
         csh \
         gfortran \
         g++ \
         make \
         patch \
         python-dev
    RUN cd /opt/amber16 \
     && echo Y | ./configure -noX11 --with-python /usr/bin/python --with-netcdf /usr/ gnu \
     && make -j6 install \
     && rm -rf test AmberTools doc  # reduce image size after the build
    RUN cd /opt/amber16 \
      && echo "test -f /opt/amber16/amber.sh && source /opt/amber16/amber.sh" >> /root/.bash_profile

ambertools:
  requires:
    - deploybase
    - ambertools_requirements
  copy_from:
    ambertools_build:
      /opt/amber16: /opt
      /root/.bash_profile: /root

symmol_build:
 requires:
  - buildbase
 build_directory: symmol
 build: |
  RUN mkdir -p /src/symmol
  ADD symmol.f /src/symmol/symmol.f
  RUN apt-get update \
   && apt-get install -y --no-install-recommends \
         gfortran libgfortran3\
   && cd /src/symmol \
   && gfortran symmol.f -o symmol \
   && apt-get -y remove --purge \
       gfortran \
   && apt-get -y clean \
   && apt-get autoremove -y --purge \
   && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
  RUN mv /src/symmol/symmol /usr/local/bin

symmol:
  requires:
   - deploybase
  copy_from:
    symmol_build:
      /usr/local/bin/symmol: /usr/local/bin


dssp:
  requires:
   - base
  build: |
    RUN apt-get update \
      && apt-get install -y --no-install-recommends wget  \
      && wget ftp://ftp.cmbi.ru.nl/pub/software/dssp/dssp-2.0.4-linux-i386 \
      && mv dssp-2.0.4-linux-i386 /usr/local/bin/dssp.exe \
      && chmod +x /usr/local/bin/dssp.exe \
      && apt-get -y clean \
      && apt-get autoremove -y --purge \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

edtsurf:
  requires:
    - base
  build: |
      RUN apt-get update \
      && apt-get install -y --no-install-recommends wget \
      && cd /usr/local/bin \
      && wget http://zhanglab.ccmb.med.umich.edu/EDTSurf/EDTSurf \
      && chmod +x EDTSurf \
      && apt-get -y clean \
      && apt-get autoremove -y --purge \
      && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


########################
# Python tools
notebook:
 requires:
  - python_deploy_base
 build_directory: notebook/
 build: |
    RUN apt-get update \
       && apt-get -y install --no-install-recommends \
            python-matplotlib gcc python-dev \
       && pip install scandir \
       && apt-get -y remove gcc python-dev --purge \
       && cleanapt
    RUN pip install \
        jupyter \
        ipywidgets
    ENTRYPOINT /run_notebook.sh
    EXPOSE 8888
    RUN mkdir /notebooks
    WORKDIR /notebooks
    COPY run_notebook.sh /run_notebook.sh


openmm_build:
 description: Basic OpenMM install (CPU only) with python bindings
 build_directory: openmm
 requires:
  - buildbase
 build: |
  RUN mkdir -p /src
  ADD OpenMM-7.0.1-Linux.zip /src/OpenMM.zip
  RUN cd /src/ \
   && unzip OpenMM.zip && rm OpenMM.zip \
   && cd /src/OpenMM-7.*-Linux \
   && cat < echo "\n\n" | ./install.sh


openmm:
  requires:
    - python_deploy_base
  copy_from:
   openmm_build:
     /usr/local/lib/python2.7/dist-packages/simtk/: /usr/local/lib/python2.7/dist-packages/
     /usr/local/openmm/include: /usr/local/openmm
     /usr/local/openmm/lib: /usr/local/openmm
     /usr/local/openmm/licenses: /usr/local/openmm


pdbfixer:
 requires:
  - openmm
 build: |
  RUN pip install https://github.com/pandegroup/pdbfixer/archive/v1.3.1.tar.gz


pyscf_dependencies:
  build: |
    RUN apt-get update \
     && apt-get install -y --no-install-recommends \
        libblas-dev \
        libgomp1 \
        python-h5py \
     && cleanapt


pyscf_build:
 requires:
  - buildbase
  - pyscf_dependencies
 build: |
  RUN apt-get install -y \
    cmake \
    python-h5py \
    g++ \
    wget \
    git \
    gfortran \
   && cd /opt \
     && wget -nv https://github.com/sunqm/pyscf/archive/v1.1.1.tar.gz \
     && tar xvzf v1.1.1.tar.gz && rm v1.1.1.tar.gz \
     && mv pyscf-1.1.1 pyscf \
   && cd /opt/pyscf/lib \
     && mv CMakeLists.txt CMakeLists.txt.old \
     && sed -e "s/libcint\.git/qcint.git/" CMakeLists.txt.old > CMakeLists.txt \
     && mkdir build && cd build \
     && cmake .. \
     && make \
     && rm -rf /opt/pyscf/lib/build


pyscf:
  requires:
    - python_deploy_base
    - pyscf_dependencies
  copy_from:
    pyscf_build:
      /opt/pyscf: /opt


openbabel:
 requires:
  - python_install
 build: |
  RUN apt-get update && apt-get install -y \
    openbabel \
    python-openbabel \
   && apt-get -y clean \
   && apt-get autoremove -y --purge \
   && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*


pyquante2:
 requires:
  - python_install
 build: |
  RUN pip install git+git://github.com/rpmuller/pyquante2.git


chem_python:
 description: All of the external python chemistry libraries in one place
 requires:
  - openbabel
  - openmm
  - pyscf
  - pdbfixer
  - biopython
  - parmed


chem_notebook:
 requires:
  - notebook
  - chem_python


####### BioPython ########
biopython_build:
  requires:
   - buildbase
  build: RUN pip install biopython


biopython:
  requires:
    - python_deploy_base
  copy_from:
    biopython_build:
      /usr/local/lib/python2.7/dist-packages/: /usr/local/lib/python2.7/


####### ParmEd ##########
parmed_build:
  requires:
   - buildbase
  build: RUN  pip install parmed

parmed:
  requires:
    - python_deploy_base
  copy_from:
    parmed_build:
      /usr/local/lib/python2.7/dist-packages/: /usr/local/lib/python2.7/




cuda7_0:
 requires:
  - devtools
 build: |
  RUN wget -nv http://developer.download.nvidia.com/compute/cuda/repos/ubuntu1404/x86_64/cuda-repo-ubuntu1404_7.0-28_amd64.deb
  RUN dpkg -i cuda-repo-ubuntu1404_7.0-28_amd64.deb && apt-get update && apt-get -y install cuda



############## NWChem ###########
nwchem_requirements:
  build_directory: nwchem/
  description: Base libraries for BOTH running and building NWChem
  build: |
    RUN         apt-get update \
             && apt-get install -y libopenmpi-dev openmpi-bin \
             && cleanapt
    ENV            NWCHEM_TOP="/opt/nwchem" \
                   NWCHEM_TARGET=LINUX64 \
                   FFIELD=amber
    ENV            AMBER_1=${NWCHEM_TOP}/src/data/amber_s/ \
                   AMBER_2=${NWCHEM_TOP}/src/data/amber_q/ \
                   AMBER_3=${NWCHEM_TOP}/src/data/amber_x/ \
                   AMBER_4=${NWCHEM_TOP}/src/data/amber_u/ \
                   SPCE=${NWCHEM_TOP}/src/data/solvents/spce.rst \
                   CHARMM_S=${NWCHEM_TOP}/src/data/charmm_s/ \
                   CHARMM_X=${NWCHEM_TOP}/src/data/charmm_x/ \
                   PATH=$PATH:${NWCHEM_TOP}/bin/LINUX64
    COPY run.sh run.py getresults.py /usr/bin/
    RUN chmod +x /usr/bin/getresults.py /usr/bin/run.py /usr/bin/run.sh
    ENV NWCHEMFILE="From https://svn.pnl.gov/svn/nwchem/trunk/src"



nwchem_build:
 requires:
  - buildbase
  - nwchem_requirements
 description: Build image for NWChem. Based on https://github.com/edoapra/docker-file/tree/master/nwchem-dev
 build: |
    RUN         apt-get install -y patch curl perl
    #get OpenBLAS and compile with 64-bit integers
    WORKDIR     /opt
    RUN         mkdir -p /opt/lib/ \
                   && wget  https://github.com/xianyi/OpenBLAS/archive/develop.zip \
                   && unzip develop.zip \
                   && rm develop.zip \
                   && cd  OpenBLAS-develop \
                   && make -j3 TARGET=CORE2 INTERFACE64=1 NO_CBLAS=1 NO_LAPACK=1 NO_LAPACKE=1 libs shared \
                   &&  cp libopenblas.* /opt/lib \
                   && rm -rf /opt/OpenBLAS-develop
    WORKDIR      /opt
    ENV          NWCHEM_MODULES="nwdft driver stepper" \
                   PYTHONVERSION=2.7 \
                   PYTHONHOME="/usr" \
                   USE_PYTHONCONFIG=Y \
                   BLASOPT="-L/opt/lib -lopenblas" \
                   BLAS_SIZE=8 \
                   LD_LIBRARY_PATH="$LD_LIBRARY_PATH:/opt/lib" \
                   USE_MPI=y \
                   USE_MPIF=y \
                   USE_MPIF4=y
    #ENV         MRCC_METHODS=y
    #ENV         CCSDTQ=y
    #ENV         CCSDTLR=y
    RUN          mkdir -p nwchem \
                   && cd nwchem \
                   && svn co --depth empty https://svn.pnl.gov/svn/nwchem/trunk/src \
                   && cd src \
                   && svn update GNUmakefile nwchem.F config \
                        tools include basis geom inp input  \
                        pstat rtdb task symmetry util peigs perfm bq cons blas lapack \
                        NWints atomscf cphf ddscf driver gradients hessian nwdft optim property stepper symmetry vib \
                   && rm -rf /opt/nwchem/.svn \
                   && cd tools \
                   && svn export --non-interactive --username nwchem --password nwchem \
                          https://svn.pnl.gov/svn/hpctools/branches/ga-5-5  \
                   && cd .. \
                   #strip native compiler options as Fedora does
                   && sed -i 's|-march=native||' config/makefile.h \
                   && sed -i 's|-mtune=native|-mtune=generic|' config/makefile.h \
                   && sed -i 's|-mfpmath=sse||' config/makefile.h \
                   && sed -i 's|-msse3||' config/makefile.h  \
                   && make nwchem_config && make -j3  \
                   #clean unnecessary source to reduce docker size
                   && rm -rf tce tools nwdft NWints geom symmetry util nwxc ddscf lapack blas rism \
                          argos peigs rmdft gradients symmetry property smd lucia dplot propery \
                          hessian ccsd mp2_grad moints cafe analyz dimqm /opt/nwchem/lib
    RUN git clone https://github.com/NWChem-Python/nwapi \
       && cd nwapi \
       && make -f makefile.linux \
       && python test.py


nwchem:
  requires:
    - python_deploy_base
    - nwchem_requirements
  copy_from:
    nwchem_build:
      /usr/local/lib/python2.7/dist-packages: /usr/local/lib/python2.7/
      /opt/nwchem: /opt
      /opt/lib: /opt



nbo: # This ISN'T open source - we'll provide the dockerfile, but users must supply the source code
 requires:
  - devtools
 build_directory: nbo6_0
 build: |
  ADD nbo6.0-src.tar.gz /opt/
  RUN cd /opt/nbo6 && sed -i.orig -e 's/NBODIR = \~\/nbo6/NBODIR = \/opt\/nbo6/g' Make.config
  RUN cd /opt/nbo6 && make
  RUN ln -s /opt/nbo6/bin/*.exe /usr/local/bin/
  ENV NBOEXE=/opt/nbo6/bin/nbo6.i4.exe


gamess:
 requires:
  - devtools
 build_directory: gamess
 build: |
  RUN apt-get install -y libatlas-base-dev
  ADD gamess-current.tar.gz /opt
  ADD config.tar /opt
  RUN cd /opt/gamess/ddi \
   && ./compddi | tee compddi.log \
   && mv ddikick.x .. \
   && cd /opt/gamess \
   && ./compall | tee compall.log \
   && ./lked gamess 00 | tee lked.log \
   && mkdir -p /scr/root /root/scr \
   && ln -s /opt/gamess/rungms /usr/local/bin/rungms
